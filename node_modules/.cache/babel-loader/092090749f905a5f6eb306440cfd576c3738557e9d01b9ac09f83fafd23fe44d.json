{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loner\\\\Desktop\\\\samgtu\\\\app\\\\src\\\\components\\\\charts\\\\Charts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Charts = () => {\n  _s();\n  const [averageTemp, setAverageTemp] = useState([]);\n  const [date, setDate] = useState([]);\n  useEffect(() => {\n    const getData = async () => {\n      const url = 'http://localhost:8000/temperature';\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n        setAverageTemp(data === null || data === void 0 ? void 0 : data.map(item => item.data));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getData();\n  }, []);\n  const series = [\n  //data on the y-axis\n  {\n    name: \"Temperature in Celsius\",\n    data: averageTemp\n  }];\n  const options = {\n    chart: {\n      type: 'bar',\n      height: 350,\n      stacked: true,\n      stackType: '100%'\n    },\n    plotOptions: {\n      bar: {\n        horizontal: true\n      }\n    },\n    stroke: {\n      width: 1,\n      colors: ['#fff']\n    },\n    title: {\n      text: '100% Stacked Bar'\n    },\n    xaxis: {\n      categories: [2008, 2009, 2010, 2011, 2012, 2013, 2014] // по оси y\n    },\n\n    fill: {\n      opacity: 1\n    },\n    legend: {\n      position: 'top',\n      horizontalAlign: 'left',\n      offsetX: 40\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: options,\n      series: series,\n      type: \"bar\",\n      width: \"450\",\n      stacked: \"true\",\n      stackType: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Charts, \"Wwn/j7n81ZxNuAl5dj/taIHASMo=\");\n_c = Charts;\nexport default Charts;\nvar _c;\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"names":["React","useEffect","useState","Chart","Charts","averageTemp","setAverageTemp","date","setDate","getData","url","response","fetch","data","json","console","log","map","item","error","series","name","options","chart","type","height","stacked","stackType","plotOptions","bar","horizontal","stroke","width","colors","title","text","xaxis","categories","fill","opacity","legend","position","horizontalAlign","offsetX"],"sources":["C:/Users/loner/Desktop/samgtu/app/src/components/charts/Charts.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Chart from \"react-apexcharts\";\r\n\r\nconst Charts = () => {\r\n  const [averageTemp, setAverageTemp] = useState([]);\r\n  const [date, setDate] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const url = 'http://localhost:8000/temperature';\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setAverageTemp(data?.map((item) => item.data));\r\n        \r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    getData();\r\n  }, []);\r\n\r\n  const series = [ //data on the y-axis\r\n    {\r\n      name: \"Temperature in Celsius\",\r\n      data: averageTemp\r\n    }\r\n  ];\r\n\r\n  const options = {\r\n    chart: {\r\n      type: 'bar',\r\n      height: 350,\r\n      stacked: true,\r\n      stackType: '100%'\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: true,\r\n      },\r\n    },\r\n    stroke: {\r\n      width: 1,\r\n      colors: ['#fff']\r\n    },\r\n    title: {\r\n      text: '100% Stacked Bar'\r\n    },\r\n    xaxis: {\r\n      categories: [2008, 2009, 2010, 2011, 2012, 2013, 2014], // по оси y\r\n    },\r\n    fill: {\r\n      opacity: 1\r\n    },\r\n    legend: {\r\n      position: 'top',\r\n      horizontalAlign: 'left',\r\n      offsetX: 40\r\n    }\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Chart\r\n        options={options}\r\n        series={series}\r\n        type=\"bar\"\r\n        width=\"450\"\r\n        stacked= 'true'\r\n        stackType= '100%'\r\n      />\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Charts;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,kBAAkB;AAAC;AAErC,MAAMC,MAAM,GAAG,MAAM;EAAA;EACnB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,MAAMQ,OAAO,GAAG,YAAY;MAC1B,MAAMC,GAAG,GAAG,mCAAmC;MAC/C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;QACjC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;QAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjBP,cAAc,CAACO,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACL,IAAI,CAAC,CAAC;MAEhD,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;MACpB;IACF,CAAC;IACDV,OAAO,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,MAAM,GAAG;EAAE;EACf;IACEC,IAAI,EAAE,wBAAwB;IAC9BR,IAAI,EAAER;EACR,CAAC,CACF;EAED,MAAMiB,OAAO,GAAG;IACdC,KAAK,EAAE;MACLC,IAAI,EAAE,KAAK;MACXC,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE;IACb,CAAC;IACDC,WAAW,EAAE;MACXC,GAAG,EAAE;QACHC,UAAU,EAAE;MACd;IACF,CAAC;IACDC,MAAM,EAAE;MACNC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE,CAAC,MAAM;IACjB,CAAC;IACDC,KAAK,EAAE;MACLC,IAAI,EAAE;IACR,CAAC;IACDC,KAAK,EAAE;MACLC,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAE;IAC1D,CAAC;;IACDC,IAAI,EAAE;MACJC,OAAO,EAAE;IACX,CAAC;IACDC,MAAM,EAAE;MACNC,QAAQ,EAAE,KAAK;MACfC,eAAe,EAAE,MAAM;MACvBC,OAAO,EAAE;IACX;EACF,CAAC;EAGD,oBACE;IAAA,uBACE,QAAC,KAAK;MACJ,OAAO,EAAErB,OAAQ;MACjB,MAAM,EAAEF,MAAO;MACf,IAAI,EAAC,KAAK;MACV,KAAK,EAAC,KAAK;MACX,OAAO,EAAE,MAAM;MACf,SAAS,EAAE;IAAM;MAAA;MAAA;MAAA;IAAA;EACjB;IAAA;IAAA;IAAA;EAAA,QACE;AAGV,CAAC;AAAA,GAzEKhB,MAAM;AAAA,KAANA,MAAM;AA2EZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}